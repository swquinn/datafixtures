/* Copyright 2014 Extesla Digital Entertainment, Ltd. All rights reserved.
 *
 * Licensed under the MIT License (http://opensource.org/licenses/MIT)
 *
 * Permission is hereby granted, free of charge, to any
 * person obtaining a copy of this software and associated
 * documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished
 * to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice
 * shall be included in all copies or substantial portions of
 * the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS
 * OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 * OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT
 * OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
package com.extesla.fixtures;

import java.util.HashMap;
import java.util.Map;

import com.extesla.fixtures.annotations.FixtureCache;
import com.extesla.fixtures.annotations.FixtureGenerate;

/**
 *
 * @author Sean.Quinn
 * @since  1.0
 */
abstract public class AbstractFixture<T> implements Fixture<T> {

	/**
	 * The name of the {@link Fixture}.
	 */
	private final String name;

	/**
	 * The object generated by this {@link Fixture}.
	 */
	private T object;

	/**
	 * The data reference(s) for this fixture. All references have a unique key
	 * which identifies them, e.g. "my-data".
	 */
	@FixtureCache
	protected Map<String, Object> references = new HashMap<String, Object>();

	/**
	 * Constructor taking a simple {@link String} as the name for the
	 * {@link Fixture}.
	 *
	 * @param name the {@code DataFixture}'s name.
	 */
	protected AbstractFixture(final String name) {
		this.name = name;
	}

	/**
	 * Constructor which infers the name of the {@link Fixture} from the
	 * data fixture's class.
	 */
	protected AbstractFixture() {
		this.name = getClass().getSimpleName();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public T getObject() {
		return object;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	@FixtureGenerate
	public final T generate() {
		return getData();
	}

	/**
	 * Returns the object, {@code T}.
	 * @return the object.
	 */
	abstract protected T getData();

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean hasReference(final String name) {
		return references.containsKey(name);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Object getReference(final String name) {
		return references.get(name);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void addReference(final String name, final Object object) {
		references.put(name, object);
	}
}
